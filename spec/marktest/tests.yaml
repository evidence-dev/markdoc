- name: Heading with an ID
  code: |
    # This is a test {% #asdf %}
  expected:
    - tag: h1
      attributes:
        id: asdf
      children:
        - 'This is a test '

- name: Ordered list
  code: |
    1. foo
    2. bar
    3. baz
  expected:
    - tag: ol
      children:
        - tag: li
          children: [foo]
        - tag: li
          children: [bar]
        - tag: li
          children: [baz]

- name: Ordered list with start
  code: |
    2. foo
    3. bar
    4. baz
  expected:
    - tag: ol
      attributes:
        start: 2
      children:
        - tag: li
          children: [foo]
        - tag: li
          children: [bar]
        - tag: li
          children: [baz]

- name: Heading with a class
  code: |
    # This is a test {% .asdf %}
  expected:
    - tag: h1
      attributes:
        className: asdf
      children:
        - 'This is a test '

- name: Heading with multiple classes
  code: |
    # This is a test {% .foo .bar %}
  expected:
    - tag: h1
      attributes:
        className: foo bar
      children:
        - 'This is a test '

- name: Tag with hash and array
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo={bar= [1, 2, 3]} %}
    This is a test
    {% /test %}
  expected:
    - tag: foo
      attributes:
        foo: { bar: [1, 2, 3] }
      children:
        - tag: p
          children: [This is a test]
- name: Empty hash with comma fails
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo={,} /%}
  expectedError: Expected "}", identifier, string, or whitespace but "," found.
- name: Empty array with comma fails
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo=[,] /%}
  expectedError: Expected "[", "]", "{", boolean, identifier, null, number, string, variable, or whitespace but "," found.
- name: Array without commas should fail
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo=[1 2 3] /%}
  expectedError: Expected ",", "]", or whitespace but "2" found.
- name: Hash with three keys
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo={i= 1 j= 2 k= 3} /%}
  expected:
    - tag: foo
      attributes:
        foo: { i: 1, j: 2, k: 3 }
- name: Array with trailing comma
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    {% test foo=[1, 2 , 3, ] /%}
  expected:
    - tag: foo
      attributes:
        foo: [1, 2, 3]

- name: Self-closing tag
  config:
    tags:
      test: { render: foo }
  code: |
    {% test /%}
  expected:
    - tag: foo

- name: Undefined tag
  code: |
    {% test %}
    This is a test
    {% /test %}
  validation: false
  expected:
    - tag: p
      children: [This is a test]

- name: Self-closing tag
  code: |
    {% partial file="foo" %}
    bar
    {% /partial %}
  validation: false
  expected: [null]

- name: Content with inline code text
  code: |
    This is a `test`
  expected:
    - tag: p
      children:
        - 'This is a '
        - tag: code
          children:
            - test

- name: Fenced code block with an annotation
  code: |
    ```ruby {% #test %}
    example
    ```
  expected:
    - tag: pre
      attributes: { id: 'test', 'data-language': 'ruby', 'meta': '{% #test %}' }
      children: ["example\n"]

- name: Frontmatter
  code: |
    ---
    foo: bar
    ---

    # Example

    This is a test
  expected:
    - tag: h1
      children: [Example]
    - tag: p
      children:
        - This is a test

- name: Inline variable
  config:
    variables:
      foo: 10
  code: |
    This is a test: {% $foo %}
  expected:
    - tag: p
      children:
        - 'This is a test: '
        - 10

- name: Inline tag
  config:
    tags:
      foo:
        render: span
  code: |
    # Testing

    This is a {% foo %}test{% /foo %}.
  expected:
    - tag: h1
      children: [Testing]
    - tag: p
      children:
        - 'This is a '
        - tag: span
          children: [test]
        - '.'

# Functions
- name: Standalone function
  code: |
    foo {% and(1, 2, 3) %}
  expected:
    - tag: p
      children:
        - 'foo '
        - true

- name: Function as a tag attribute
  config:
    tags:
      foo:
        render: p
        attributes:
          bar: { type: Object, render: true }
  code: |
    {% foo bar=and(true, true, true) /%}
  expected:
    - tag: p
      attributes:
        bar: true

# Conditionals
- name: Simple conditional
  config:
    variables:
      foo: false
  code: |
    {% if $foo %}
    This is a test
    {% /if %}
  expected: []

- name: Simple conditional with non-existent variable
  code: |
    {% if $foo %}
    This is a test
    {% /if %}
  expected: []

- name: Conditional with else clause
  config:
    variables:
      foo: false
  code: |
    {% if $foo %}
    Condition is true
    {% else /%}
    Condition is false
    {% /if %}
  expected:
    - tag: p
      children:
        - Condition is false

- name: Conditional with multiple else clauses
  config:
    variables:
      foo: false
      bar: false
  code: |
    {% if $foo %}
    Condition foo is true
    {% else $bar /%}
    Condition bar is true
    {% else /%}
    No condition is true
    {% /if %}
  expected:
    - tag: p
      children:
        - No condition is true

- name: Conditional with equals
  config:
    variables:
      foo: test
  code: |
    {% if equals($foo, "test") %}
    test
    {% /if %}
  expected:
    - tag: p
      children: [test]

- name: Conditional with equals and an and function
  config:
    variables:
      foo: test
      bar: true
  code: |
    {% if and(equals($foo, "test"), $bar) %}
    test
    {% /if %}
  expected:
    - tag: p
      children: [test]

- name: Conditional with equals and an or function
  config:
    variables:
      foo: test
      bar: true
  code: |
    {% if or(equals($foo, "wrong"), $bar) %}
    test
    {% /if %}
  expected:
    - tag: p
      children: [test]

- name: Conditional that fails
  config:
    variables:
      foo: test
  code: |
    {% if equals($foo, "wrong") %}
    test
    {% /if %}
  expected: []

- name: Conditional with equals and an and function that fails
  config:
    variables:
      foo: test
      bar: true
  code: |
    {% if and(equals($foo, "wrong"), $bar) %}
    test
    {% /if %}
  expected: []

- name: Conditional with equals and an undefined variable
  code: |
    {% if equals($foo.bar, "test") %}
    test
    {% /if %}
  expected: []

- name: False condition with a not statement
  config:
    variables:
      foo: true
  code: |
    {% if not($foo) %}
    Conditions are met
    {% /if %}
  expected: []

- name: True condition with a not statement
  config:
    variables:
      foo: false
  code: |
    {% if not($foo) %}
    Conditions are met
    {% /if %}
  expected:
    - tag: p
      children:
        - Conditions are met

- name: False condition with a not statement and other booleans
  config:
    variables:
      foo: true
      bar: false
      baz: true
  code: |
    {% if not(and($baz, or($foo, $bar))) %}
    Conditions are met
    {% /if %}
  expected: []

- name: True condition with a not statement and other booleans
  config:
    variables:
      foo: true
      bar: false
      baz: false
  code: |
    {% if not(and($baz, or($foo, $bar))) %}
    Conditions are met
    {% /if %}
  expected:
    - tag: p
      children:
        - Conditions are met

- name: Condition with multiple variables
  config:
    variables:
      foo: true
      bar: true
  code: |
    {% if and($foo, $bar) %}
    Conditions are met
    {% /if %}
  expected:
    - tag: p
      children:
        - Conditions are met

- name: Using the default function
  code: |
    {% if default($foo, true) %}
    Conditions are met
    {% /if %}
  expected:
    - tag: p
      children:
        - Conditions are met

- name: Rendering HTML content
  renderer: html
  code: |
    This is a test
  expected: '<article><p>This is a test</p></article>'

- name: Rendering HTML with an array attribute
  renderer: html
  config:
    tags:
      test:
        render: test
        attributes:
          foo: { type: Array, render: true }
  code: |
    {% test foo=[1,2,3] %}
    This is a test
    {% /test %}
  expected: |
    <article><test foo="1,2,3"><p>This is a test</p></test></article>

- name: Rendering HTML with a class name
  renderer: html
  code: |
    # This is a test {% .foo .bar %}
  expected: |
    <article><h1 class="foo bar">This is a test </h1></article>

- name: Ignoring tags in fenced code blocks
  code: |
    ```javascript {% process=false %}
    foo
    {% bar %}
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=false %}'
      children:
        - "foo\n{% bar %}\n"

- name: Using a variable in an attribute, not a string
  config:
    variables:
      bar: { baz: test }
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo=$bar.baz /%}
  expected:
    - tag: test
      attributes:
        foo: test

- name: Using a variable in an attribute string 
  config:
    variables:
      bar: { baz: test }
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="Hello {{$bar.baz}}" /%}
  expected:
    - tag: test
      attributes:
        foo: Hello test

- name: Using a variable in an attribute string at the end of a word
  config:
    variables:
      metric: sales
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="sum_{{$metric}}" /%}
  expected:
    - tag: test
      attributes:
        foo: sum_sales

- name: Using a variable in an attribute string at the start of a word
  config:
    variables:
      metric: sales
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$metric}}_sum" /%}
  expected:
    - tag: test
      attributes:
        foo: sales_sum

- name: Using a variable in a fenced code block
  config:
    variables:
      bar: test
  code: |
    ```javascript
    foo {{$bar}}
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
      children:
        - "foo test\n"

- name: Using an undefined variable in a fenced code block
  config:
    variables:
      bar: test
  validation: false
  code: |
    ```javascript
    foo {{$undefinedVar}}
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
      children:
        - "foo {{$undefinedVar}}\n"


- name: Edge case - malformed interpolation syntax
  config:
    variables:
      foo: bar
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$foo" /%}
  expected:
    - tag: test
      attributes:
        foo: "{{$foo"

- name: Edge case - nested interpolation (should not work)
  config:
    variables:
      foo: "{{$bar}}"
      bar: baz
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$foo}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "{{$bar}}"
- name: Edge case - object with toString
  config:
    variables:
      obj: "custom object"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="Object: {{$obj}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "Object: custom object"

- name: Edge case - null and undefined values
  config:
    variables:
      nullVal: null
      undefinedVal: undefined
      emptyStr: ""
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="Null: {{$nullVal}}, Undefined: {{$undefinedVal}}, Empty: '{{$emptyStr}}'" /%}
  expected:
    - tag: test
      attributes:
        foo: "Null: , Undefined: undefined, Empty: ''"

- name: Edge case - very deep nesting
  config:
    variables:
      level1: { level2: { level3: { level4: { level5: "deep" } } } }
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$level1.level2.level3.level4.level5}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "deep"

- name: Edge case - partial path failure
  config:
    variables:
      level1: { level2: { level3: "exists" } }
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  validation: false
  code: |
    {% test foo="{{$level1.level2.level3.level4}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "{{$level1.level2.level3.level4}}"

- name: Edge case - empty interpolation
  config:
    variables:
      foo: bar
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "{{}}"

- name: Edge case - whitespace only in interpolation
  config:
    variables:
      foo: bar
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{   }}" /%}
  expected:
    - tag: test
      attributes:
        foo: "{{   }}"

- name: Edge case - special characters in variable names
  config:
    variables:
      "user-name": "john"
      "user_name": "jane"
      "user123": "test"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$user-name}} {{$user_name}} {{$user123}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "john jane test"

- name: Edge case - very long variable names
  config:
    variables:
      "very_long_variable_name_that_exceeds_normal_length_limits": "long"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$very_long_variable_name_that_exceeds_normal_length_limits}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "long"

- name: Edge case - numbers as variable names are allowed
  config:
    variables:
      "123": "number"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$123}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "number"

- name: Edge case - boolean values
  config:
    variables:
      trueVal: true
      falseVal: false
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="True: {{$trueVal}}, False: {{$falseVal}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "True: true, False: false"

- name: Edge case - number values
  config:
    variables:
      intVal: 42
      floatVal: 3.14
      zeroVal: 0
      negVal: -1
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="Int: {{$intVal}}, Float: {{$floatVal}}, Zero: {{$zeroVal}}, Neg: {{$negVal}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "Int: 42, Float: 3.14, Zero: 0, Neg: -1"

- name: Edge case - multiple interpolations in one string
  config:
    variables:
      a: "first"
      b: "second"
      c: "third"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$a}} {{$b}} {{$c}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "first second third"

- name: Edge case - interpolation at string boundaries
  config:
    variables:
      start: "begin"
      end: "finish"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$start}}middle{{$end}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "beginmiddlefinish"

- name: Edge case - fenced code block with complex interpolation
  config:
    variables:
      language: "javascript"
      function: "testFunction"
      message: "Hello World"
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    ```{{$language}}
    function {{$function}}() {
      console.log("{{$message}}");
    }
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
      children:
        - "function testFunction() {\n  console.log(\"Hello World\");\n}\n"

- name: Edge case - fenced code block with undefined variables
  config:
    variables:
      language: "python"
  validation: false
  code: |
    ```{{$language}}
    print("{{$undefined_var}}")
    ```
  expected:
    - tag: pre
      attributes:
        data-language: python
      children:
        - "print(\"{{$undefined_var}}\")\n"

- name: Edge case - empty variables object
  config:
    variables: {}
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  validation: false
  code: |
    {% test foo="Hello {{$name}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "Hello {{$name}}"

- name: Edge case - variables object with null/undefined
  config:
    variables: null
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="Hello {{$name}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "Hello {{$name}}"

- name: Edge case - variables object with undefined
  config:
    variables: undefined
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  validation: false
  code: |
    {% test foo="Hello {{$name}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "Hello {{$name}}"

- name: Edge case - getting a key from an array element
  config:
    variables:
      arr: [{ key: 'a' }, { key: 'b' }, { key: 'c' }]
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$arr[1].key}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "b"

- name: Edge case - getting a deep item from a mixed array and object
  config:
    variables:
      arr: [{ obj: { key: ['a', 'b', { deep: 'c' }] } }, { obj: { key: ['d', 'e', { deep: 'f' }] } }, { obj: { key: ['g', 'h', { deep: 'i' }] } }]
    tags:
      test:
        render: test
        attributes:
          foo:
            type: String
            render: true
  code: |
    {% test foo="{{$arr[1].obj.key[2].deep}}" /%}
  expected:
    - tag: test
      attributes:
        foo: "f" 

- name: Object values with interpolation are supported
  config:
    variables:
      name: "World"
      site: { name: "Markdoc" }
      author: "John Doe"
    tags:
      test:
        render: test
        attributes:
          metadata:
            type: Object
            render: true
  code: |
    {% test metadata={title="Hello {{$name}}" author="{{$author}}" site="{{$site.name}}"} /%}
  expected:
    - tag: test
      attributes:
        metadata: {title: "Hello World", author: "John Doe", site: "Markdoc"}

- name: Array values with interpolation are supported
  config:
    variables:
      name: "World"
      site: { name: "Markdoc" }
      author: "John Doe"
    tags:
      test:
        render: test
        attributes:
          items:
            type: Array
            render: true
  code: |
    {% test items=["Hello {{$name}}", "{{$author}}", "{{$site.name}}"] /%}
  expected:
    - tag: test
      attributes:
        items: ["Hello World", "John Doe", "Markdoc"]

- name: Simple nested object interpolation test
  config:
    variables:
      name: "John"
      theme: "dark"
      site: "Markdoc"
    tags:
      test:
        render: test
        attributes:
          config:
            type: Object
            render: true
          summary:
            type: String
            render: true
  code: |
    {% test config={user={name="{{$name}} Doe" theme="{{$theme}}"}} summary="User {{$name}} Doe on {{$site}}" /%}
  expected:
    - tag: test
      attributes:
        config: {
          user: {name: "John Doe", theme: "dark"},
        }
        summary: "User John Doe on Markdoc"


- name: Using a backtick in a fenced code block string attribute
  config:
    nodes:
      fence:
        render: pre
        attributes:
          content:
            type: String
            render: false
            required: true
          language:
            type: String
            render: 'data-language'
          process:
            type: Boolean
            render: false
            default: true
          title:
            type: String
          meta:
            type: String

  code: |
    ~~~yaml {% title="this is a `test`" %}
    example
    ~~~
  expected:
    - tag: pre
      attributes:
        data-language: yaml
        title: 'this is a `test`'
        meta: '{% title="this is a `test`" %}'
      children:
        - "example\n"

- name: Conditional and variable in code example
  config:
    variables:
      foo: bar
      baz: true
  code: |
    ```javascript {% process=true %}
    testing
    {% if $baz %}
    console.log('This is a test: {% $foo %}');
    {% /if %}
    test
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=true %}'
      children:
        - testing
        - "\nconsole.log('This is a test: "
        - 'bar'
        - "');"
        - "\ntest\n"

- name: Conditional and variable in code example with indentation
  config:
    variables:
      foo: bar
      baz: true
  code: |
    ```javascript
    function test() {
      testing();
      {% if $baz %}
      console.log('This is a test: {% $foo %}');
      {% /if %}
      return;
    }
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
      children:
        - "function test() {\n  testing();"
        - "\n  console.log('This is a test: "
        - 'bar'
        - "');"
        - "\n  return;\n}\n"

- name: Conditional and variable in code example
  config:
    variables:
      foo: bar
      baz: false
  code: |
    ```javascript {% process=true %}
    testing
    {% if $baz %}
    console.log('This is a test: {% $foo %}');
    {% /if %}
    test
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=true %}'
      children:
        - testing
        - "\ntest\n"

- name: Tag after a comment in a code example
  config:
    tags:
      test: { render: test }
  code: |
    ```
    # Testing

    {% test /%}
    test
    ```
  expected:
    - tag: pre
      children:
        - "# Testing\n"
        - tag: test
        - "\ntest\n"

- name: Multiple sequential tags in a code example
  config:
    tags:
      test: { render: test }
  code: |
    ```
    {% test /%}

    {% test /%}

    {% test /%}
    ```
  expected:
    - tag: pre
      children:
        - tag: test
        - "\n"
        - tag: test
        - "\n"
        - tag: test
        - "\n"

- name: Conditional and variable in the same line in a code example
  config:
    variables:
      foo: bar
      baz: true
  code: |
    ```javascript {% process=true %}
    testing {% $foo %} test{% if $baz %}example{% /if %} another test
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=true %}'
      children:
        - 'testing '
        - 'bar'
        - ' test'
        - 'example'
        - " another test\n"

- name: Arbitrary tag in a code example
  config:
    tags:
      test: { render: foo, attributes: { foo: { render: true } } }
  code: |
    ```javascript {% process=true %}
    testing
    {% test foo="bar" %}
    This is a test
    {% /test %}
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=true %}'
      children:
        - testing
        - tag: foo
          attributes:
            foo: bar
          children:
            - "\nThis is a test"
        - "\n"

- name: Nested variable inside of a tag in a code example
  config:
    tags:
      token: { render: token }
    variables:
      foo: bar
      baz: true
  code: |
    ```javascript {% process=true %}
    var stripe = Stripe('{% token %}{% $foo %}{% /token %}');
    ```
  expected:
    - tag: pre
      attributes:
        data-language: javascript
        meta: '{% process=true %}'
      children:
        - "var stripe = Stripe('"
        - tag: token
          children: [bar]
        - "');\n"

- name: Handling for softbreaks
  code: |
    this is a test
    with softbreaks
  expected:
    - tag: p
      children:
        - this is a test
        - ' '
        - with softbreaks

- name: Nested variable access with a string
  config:
    variables:
      foo:
        this is a test: bar
  code: |
    this is a test: {% $foo["this is a test"] %}
  expected:
    - tag: p
      children:
        - 'this is a test: '
        - bar

- name: Disabled setext heading
  code: |
    Testing
    -------
  expected:
    - tag: p
      children: [Testing]
    - tag: hr



- name: Closing tag with trailing whitespace
  config:
    tags:
      test:
        render: test
        attributes:
          title:
            type: String
  code: |
    {% test title="asdf" %}
    This is a test
    {% /test %}
  expected:
    - tag: test
      attributes:
        title: asdf
      children:
        - tag: p
          children:
            - This is a test

- name: Escaped string in an attribute
  config:
    tags:
      foo:
        render: test
        attributes:
          bar:
            type: String
  code: |
    {% foo bar="test \"testing\" test" /%}
  expected:
    - tag: test
      attributes:
        bar: 'test "testing" test'

- name: 2D Array with new line before closing bracket
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Array
  code: |
    {% test foo=[
      [1, 2],
      [3, 4]
    ] /%}
  expected:
    - tag: test
      attributes:
        foo: [[1, 2], [3, 4]]

- name: 2D Array with new line and comma before closing bracket
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Array
  code: |
    {% test foo=[
      [1, 2],
      [3, 4],
    ] /%}
  expected:
    - tag: test
      attributes:
        foo: [[1, 2], [3, 4]]

- name: 2D Array single line
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Array
  code: |
    {% test foo=[[1, 2], [3, 4]] /%}
  expected:
    - tag: test
      attributes:
        foo: [[1, 2], [3, 4]]
- name: Empty array attribute value
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Array
  code: |
    {% test foo=[] %}
    testing
    {% /test %}
  expected:
    - tag: test
      attributes:
        foo: []
      children:
        - tag: p
          children:
            - testing

- name: Empty hash attribute value
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Object
  code: |
    {% test foo={} %}
    testing
    {% /test %}
  expected:
    - tag: test
      attributes:
        foo: {}
      children:
        - tag: p
          children:
            - testing

- name: Spaces inside of curly braces
  config:
    tags:
      test:
        render: test
        attributes:
          foo:
            type: Object
  code: |
    {% test foo={ bar= 1 baz= 2 } %}
    testing
    {% /test %}
  expected:
    - tag: test
      attributes:
        foo: { bar: 1, baz: 2 }
      children:
        - tag: p
          children:
            - testing
- name: Image
  code: |
    ![Alt](/logo.png)
  expected:
    - tag: p
      children:
        - tag: img
          attributes:
            src: '/logo.png'
            alt: 'Alt'

- name: Hardbreak expressed with spaces
  code: "This is a paragraph  \nwith a hardbreak"
  expected:
    - tag: p
      children:
        - 'This is a paragraph'
        - tag: br
        - 'with a hardbreak'

- name: Hardbreak expressed with backslash
  code: |
    This is a paragraph\
    with a hardbreak
  expected:
    - tag: p
      children:
        - 'This is a paragraph'
        - tag: br
        - 'with a hardbreak'

- name: Softbreak
  code: |
    This is a paragraph
    with a softbreak
  expected:
    - tag: p
      children:
        - 'This is a paragraph'
        - ' '
        - 'with a softbreak'

- name: Partial
  config:
    partials:
      foo.md: This is content from a partial
  code: |
    This is a test

    {% partial file="foo.md" variables={foo= 1} /%}
  expected:
    - tag: p
      children: [This is a test]
    - tag: p
      children: [This is content from a partial]

- name: Multiple partials
  config:
    partials:
      foo.md: |
        This is content from a partial
      bar.md: |
        {% example %}
        This is content in another partial
        {% /example %}
    tags:
      example:
        render: test
  code: |
    This is a test

    {% partial file="foo.md" /%}

    {% partial file="bar.md" /%}
  expected:
    - tag: p
      children: [This is a test]
    - tag: p
      children: [This is content from a partial]
    - tag: test
      children:
        - tag: p
          children:
            - This is content in another partial

- name: Partial with a variable
  config:
    tags:
      example:
        render: test
        attributes:
          bar:
            render: true
    partials:
      foo.md: |
        {% example bar=$foo %}
        This is a partial with a variable
        {% /example %}
  code: |
    This is a test

    {% partial file="foo.md" variables={foo= 1} /%}
  expected:
    - tag: p
      children: [This is a test]
    - tag: test
      attributes:
        bar: 1
      children:
        - tag: p
          children:
            - 'This is a partial with a variable'

# Truthiness checks

- name: Untruthy things are false
  validation: false
  config:
    variables:
      foo: null
      bar: false
  code: |
    This is a test

    {% if $foo %}
    Nope
    {% /if %}

    {% if $bar %}
    Nope
    {% /if %}

    {% if $baz %}
    Nope
    {% /if %}

    {% if not("") %}
    Nope
    {% /if %}

    {% if and($foo, $bar) %}
    Nope
    {% /if %}
  expected:
    - tag: p
      children: [This is a test]

- name: Truthy things are not false
  config:
    variables:
      foo: 0
      bar: ''
      baz: true
  code: |
    {% if $foo %}
    foo
    {% /if %}

    {% if $bar %}
    bar
    {% /if %}

    {% if $baz %}
    baz
    {% /if %}

    {% if or(false, $foo) %}
    zero
    {% /if %}

    {% if and($foo, $bar, $baz) %}
    and
    {% /if %}
  expected:
    - tag: p
      children: [foo]
    - tag: p
      children: [bar]
    - tag: p
      children: [baz]
    - tag: p
      children: [zero]
    - tag: p
      children: [and]
- name: Strikethroughs
  code: '~~Strike~~'
  expected:
    - tag: p
      children:
        - tag: s
          children: [Strike]

# Indentation tests

- name: Indented paragraph in a tag
  config:
    tags:
      foo:
        render: 'div'
  code: |
    {% foo %}
        {% foo %}
            This is a test
        {% /foo %}
    {% /foo %}
  expected:
    - tag: div
      children:
        - tag: div
          children:
            - tag: p
              children: ['This is a test']

- name: Indented fence in a tag
  config:
    tags:
      foo:
        render: 'div'
  code: |
    {% foo %}
        {% foo %}
            ```javascript
            console.log('test');
            ```
        {% /foo %}
    {% /foo %}
  expected:
    - tag: div
      children:
        - tag: div
          children:
            - tag: pre
              attributes:
                data-language: javascript
              children:
                - "console.log('test');\n"

- name: Oddly indented paragraph in a tag
  config:
    tags:
      foo:
        render: 'div'
  code: |
    {% foo %}
        {% foo %}
       This is a test
        {% /foo %}
    {% /foo %}
  expected:
    - tag: div
      children:
        - tag: div
          children:
            - tag: p
              children: ['This is a test']

- name: Indented paragraph in a tag
  config:
    tags:
      foo:
        render: 'div'
  code: |
    test

          * foo
          * bar
            * baz
            * qux
  expected:
    - tag: p
      children: [test]
    - tag: ul
      children:
        - tag: li
          children: [foo]
        - tag: li
          children:
            - bar
            - tag: ul
              children:
                - tag: li
                  children: [baz]
                - tag: li
                  children: [qux]

- name: Indented paragraph in a tag
  config:
    tags:
      foo:
        render: 'div'
  code: |
    {% foo %}
      {% foo %}
          * foo
          * bar
            * baz
            * qux
            * ```javascript
              console.log('test');
              ```
            * zxcv
      {% /foo %}
    {% /foo %}
  expected:
    - tag: div
      children:
        - tag: div
          children:
            - tag: ul
              children:
                - tag: li
                  children: [foo]
                - tag: li
                  children:
                    - bar
                    - tag: ul
                      children:
                        - tag: li
                          children: [baz]
                        - tag: li
                          children: [qux]
                        - tag: li
                          children:
                            - tag: pre
                              attributes:
                                data-language: javascript
                              children:
                                - "console.log('test');\n"
                        - tag: li
                          children: [zxcv]

- name: String hash key
  config:
    tags:
      foo:
        render: div
        attributes:
          bar:
            type: Object
  code: |
    {% foo bar={"this is a test"= "test"} %}
    testing
    {% /foo %}
  expected:
    - tag: div
      attributes:
        bar:
          this is a test: test
      children:
        - tag: p
          children: [testing]

- name: Illegal string hash key
  config:
    tags:
      foo:
        render: div
        attributes:
          bar:
            type: Object
  code: |
    {% foo bar={"this is a test"= "test" "$$mdtype"= true} %}
    testing
    {% /foo %}
  expected:
    - tag: div
      attributes:
        bar:
          this is a test: test
      children:
        - tag: p
          children: [testing]

- name: Ignoring comments
  code: |
    # Example <!-- foo -->

    This is a test <!-- bar
    -->

    <!--
    baz
    -->
  expected:
    - tag: h1
      children: ['Example ']
    - tag: p
      children: ['This is a test ']

- name: Escaped quotes in tag strings
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: String
  code: |
    {% foo bar="this is a test of \"quoted\" strings" /%}
  expected:
    - tag: foo
      attributes:
        bar: 'this is a test of "quoted" strings'

- name: Escaped quotes in tag strings with html renderer
  renderer: html
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: String
  code: |
    {% foo bar="this is a test of \"quoted\" strings" /%}
  expected: <article><foo bar="this is a test of &quot;quoted&quot; strings"></foo></article>

- name: Escaped newline in tag strings
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: String
  code: |
    {% foo bar="this is a test\nof a newline in a tag" /%}
  expected:
    - tag: foo
      attributes:
        bar: |-
          this is a test
          of a newline in a tag

- name: Basic slot
  config:
    tags:
      foo:
        render: foo
        slots:
          bar: {}
  code: |
    {% foo %}
      {% slot "bar" %}
      This is a test
      {% /slot %}
    {% /foo %}
  slots: true
  expected:
    - tag: foo
      attributes:
        bar:
          - tag: p
            children:
              - This is a test

- name: Tag with multiple slots and additional content
  config:
    tags:
      foo:
        render: foo
        attributes:
          qux:
            type: String
        slots:
          bar: {}
          baz: {}
  code: |
    {% foo qux="test" %}
      {% slot "bar" %}
      This is a test
      {% /slot %}

      {% slot "baz" %}
      This is **another** test
      {% /slot %}

      This is additional content
    {% /foo %}
  slots: true
  expected:
    - tag: foo
      attributes:
        qux: test
        bar:
          - tag: p
            children:
              - This is a test
        baz:
          - tag: p
            children:
              - 'This is '
              - tag: strong
                children: [another]
              - ' test'
      children:
        - tag: p
          children:
            - This is additional content

- name: User slot tag when slots are disabled
  config:
    tags:
      slot:
        render: foo
  code: |
    {% slot %}
    bar
    {% /slot %}
  expected:
    - tag: foo
      children:
        - tag: p
          children: [bar]

- name: Handling slots that are missing a name
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: Node
  code: |
    {% foo %}
      {% slot %}
      This is a test
      {% /slot %}
    {% /foo %}
  slots: true
  expectedError: "Missing required attribute: 'primary'"
  expected:
    - tag: foo
      children: [null]

- name: Handling slots with invalid name
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: Node
  code: |
    {% foo %}
      {% slot 1 %}
      This is a test
      {% /slot %}
    {% /foo %}
  slots: true
  expectedError: "Attribute 'primary' must be type of 'String'"
  expected:
    - tag: foo
      children: [null]

- name: Validating required slot
  config:
    tags:
      foo:
        render: foo
        slots:
          bar:
            required: true
  code: |
    {% foo %}
    {% /foo %}
  slots: true
  expectedError: "Missing required slot: 'bar'"
  expected:
    - tag: foo

- name: Handling invalid slot
  config:
    tags:
      foo:
        render: foo
  code: |
    {% foo %}
      {% slot "bar" %}
      This is a test
      {% /slot %}
    {% /foo %}
  slots: true
  expectedError: "Invalid slot: 'bar'"
  expected:
    - tag: foo

- name: Handling overlapping slot and attribute
  config:
    tags:
      foo:
        render: foo
        attributes:
          bar:
            type: String
        slots:
          bar: {}
  code: |
    {% foo bar="test" %}
    {% /foo %}

    {% foo bar="test" %}
      {% slot "bar" %}
      test
      {% /slot %}
    {% /foo %}

    {% foo %}
      {% slot "bar" %}
      test
      {% /slot %}
    {% /foo %}
  slots: true
  expected:
    - tag: foo
      attributes:
        bar: 'test'
    - tag: foo
      attributes:
        bar:
          - tag: p
            children: [test]
    - tag: foo
      attributes:
        bar:
          - tag: p
            children: [test]

- name: Hnadling slot that doesn't render
  config:
    tags:
      foo:
        render: foo
        slots:
          bar:
            render: false
  slots: true
  code: |
    {% foo %}
    this is a test

    {% slot "bar" %}
    test
    {% /slot %}
    {% /foo %}
  expected:
    - tag: foo
      children:
        - tag: p
          children: [this is a test]

- name: Slot with a variable
  config:
    variables:
      example: test
    tags:
      foo:
        render: foo
        slots:
          bar: {}
  code: |
    {% foo %}
      {% slot "bar" %}
      This is a {% $example %}
      {% /slot %}
    {% /foo %}
  slots: true
  expected:
    - tag: foo
      attributes:
        bar:
          - tag: p
            children: ['This is a ', 'test']

- name: Multiline block tags
  config:
    tags:
      foo:
        render: foo
  code: |
    {% 
    foo
    #bar
    %}
    This is a test
    {% /foo %}
  expected:
    - tag: foo
      attributes:
        id: bar
      children:
        - tag: p
          children: [This is a test]

- name: Bare text interpolation in paragraph
  config:
    variables:
      name: World
  code: |
    Hello {{$name}}
  expected:
    - tag: p
      children: [Hello World]

- name: Bare text interpolation in heading
  config:
    variables:
      name: World
  code: |
    # Hello {{$name}}
  expected:
    - tag: h1
      children: [Hello World]

- name: Unordered list item with interpolation
  config:
    variables:
      name: World
  code: |
    - Hello {{$name}}
  expected:
    - tag: ul
      children:
        - tag: li
          children: [Hello World]

- name: Ordered list item with interpolation
  config:
    variables:
      num: 42
  code: |
    1. Value: {{$num}}
  expected:
    - tag: ol
      children:
        - tag: li
          children: ['Value: 42']

- name: Multiple list items with different variables
  config:
    variables:
      a: foo
      b: bar
  code: |
    - {{$a}}
    - test {{$b}}
  expected:
    - tag: ul
      children:
        - tag: li
          children: [foo]
        - tag: li
          children: [test bar]

- name: Nested unordered list with interpolation
  config:
    variables:
      parent: Top
      child: Bottom
  code: |
    - {{$parent}}
      - {{$child}}
  expected:
    - tag: ul
      children:
        - tag: li
          children:
            - Top
            - tag: ul
              children:
                - tag: li
                  children: [Bottom]

- name: Blockquote with interpolation
  config:
    variables:
      quote: Hello
  code: |
    > {{$quote}} World
  expected:
    - tag: blockquote
      children:
        - tag: p
          children: [Hello World]

- name: Blockquote with multiple paragraphs and interpolation
  config:
    variables:
      a: First
      b: Second
  code: |
    > {{$a}}
    >
    > {{$b}}
  expected:
    - tag: blockquote
      children:
        - tag: p
          children: [First]
        - tag: p
          children: [Second]

- name: Blockquote with list and interpolation
  config:
    variables:
      a: foo
  code: |
    > - {{$a}}
    > - static
  expected:
    - tag: blockquote
      children:
        - tag: ul
          children:
            - tag: li
              children: [foo]
            - tag: li
              children: [static]

- name: No interpolation inside inline code
  config:
    variables:
      name: World
  code: |
    This is `{{$name}}`
  expected:
    - tag: p
      children:
        - 'This is '
        - tag: code
          children:
            - '{{$name}}'

- name: Multiline block tags with closing on line with content
  config:
    tags:
      foo:
        render: foo
  code: |
    {% foo
    #bar %}
    This is a test
    {% /foo %}
  expected:
    - tag: foo
      attributes:
        id: bar
      children:
        - tag: p
          children: [This is a test]
